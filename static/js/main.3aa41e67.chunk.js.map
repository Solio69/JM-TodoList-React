{"version":3,"sources":["components/NewTaskForm/NewTaskForm.js","components/Task/Task.js","components/TaskList/TaskList.js","components/TasksFilter/TasksFilter.js","components/Footer/Footer.js","components/App/App.js","index.js"],"names":["NewTaskForm","state","label","onLabelChange","e","setState","target","value","onSubmit","onItemAdded","props","preventDefault","this","className","placeholder","onChange","Component","Task","handleChange","item","addEditedItem","newItem","editing","id","handleChangeKey","key","onDeleted","onToggleEdit","onToggleDone","dateСreation","completed","dateObj","Date","wasCreated","formatDistanceToNow","includeSeconds","addSuffix","type","checked","onClick","defaultValue","onBlur","onKeyPress","TaskList","todos","elements","map","i","index","TasksFilter","buttons","name","itemStatusFilter","onFilterChange","battons","defaultProps","Footer","taskCount","clearCompleted","App","todoData","JSON","parse","localStorage","getItem","filter","deleteItem","ind","findIndex","el","_","addItem","text","createTodoItem","newArr","push","toggleProperties","arr","propertyName","updateItem","filterName","filters","String","Math","floor","random","tasksLeftCount","length","filtersItems","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3aa41e67.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './NewTaskForm.css';\nimport PropTypes from 'prop-types';\n\nexport default class NewTaskForm extends Component {\n  static propTypes = {\n    onItemAdded: PropTypes.func.isRequired,\n  };\n\n  state = {\n    label: '',\n  };\n\n  onLabelChange = (e) => {\n    this.setState({\n      label: e.target.value,\n    });\n  };\n\n  onSubmit = (e) => {\n    const { onItemAdded } = this.props;\n    const { label } = this.state;\n\n    e.preventDefault();\n    onItemAdded(label);\n    this.setState({\n      label: '',\n    });\n  };\n\n  render() {\n    const { label } = this.state;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input className=\"new-todo\" placeholder=\"What needs to be done?\" onChange={this.onLabelChange} value={label} />\n      </form>\n    );\n  }\n}\n","import './Task.css';\nimport React, { Component } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport PropTypes from 'prop-types';\n\nexport default class Task extends Component {\n  static propTypes = {\n    item: PropTypes.shape({\n      label: PropTypes.string,\n      completed: PropTypes.bool,\n      editing: PropTypes.bool,\n      dateСreation: PropTypes.string,\n      id: PropTypes.number,\n    }).isRequired,\n    onDeleted: PropTypes.func.isRequired,\n    onToggleEdit: PropTypes.func.isRequired,\n    addEditedItem: PropTypes.func.isRequired,\n    onToggleDone: PropTypes.func.isRequired,\n  };\n\n  // обновляет label при потере фокуса с input\n  handleChange = (e) => {\n    const { item, addEditedItem } = this.props;\n    const newItem = { ...item };\n\n    newItem.label = e.target.value;\n    newItem.editing = false;\n\n    addEditedItem(item.id, newItem);\n  };\n\n  // обновляет label при нажатии Enter\n  handleChangeKey = (e) => {\n    if (e.key === 'Enter') {\n      this.handleChange(e);\n    }\n  };\n\n  render() {\n    // console.log(Task.defaultProps)\n    // console.log(this.props)\n\n    const { onDeleted, onToggleEdit, onToggleDone, item } = this.props;\n    const { label, dateСreation, completed, editing } = item;\n\n    // превращем строку обатно в объект\n    const dateObj = new Date(dateСreation);\n    // возвращает строку с информацией сколько минут/секунд назад создан Task\n    const wasCreated = formatDistanceToNow(dateObj, { includeSeconds: true }, { addSuffix: true });\n\n    let className = '';\n\n    if (completed) {\n      className += ' completed';\n    }\n\n    if (editing) {\n      className += ' editing';\n    }\n\n    return (\n      <li className={className}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" checked={!!completed} onChange={onToggleDone} />\n          <label>\n            <span className=\"description\">{label}</span>\n            <span className=\"created\">created {wasCreated} ago</span>\n          </label>\n          <button className=\"icon icon-edit\" type=\"button\" aria-label=\"Icon input edit\" onClick={onToggleEdit} />\n          <button className=\"icon icon-destroy\" type=\"button\" aria-label=\"Icon input deleted\" onClick={onDeleted} />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={label}\n          onBlur={this.handleChange}\n          onKeyPress={this.handleChangeKey}\n        />\n      </li>\n    );\n  }\n}\n","import React from 'react';\nimport './TaskList.css';\nimport PropTypes from 'prop-types';\nimport Task from '../Task/Task';\n\nconst TaskList = ({ todos, onDeleted, onToggleDone, onToggleEdit, addEditedItem }) => {\n  // console.log(TaskList.defaultProps)\n\n  const elements = todos.map((item, i) => {\n    const { id } = item;\n\n    return (\n      <Task\n        item={item}\n        key={id}\n        index={i}\n        onDeleted={() => onDeleted(id)}\n        onToggleDone={() => {\n          onToggleDone(id);\n        }}\n        onToggleEdit={() => {\n          onToggleEdit(id);\n        }}\n        addEditedItem={addEditedItem}\n      />\n    );\n  });\n\n  return <ul className=\"todo-list\">{elements}</ul>;\n};\n\nTaskList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onToggleDone: PropTypes.func.isRequired,\n  onToggleEdit: PropTypes.func.isRequired,\n  addEditedItem: PropTypes.func.isRequired,\n};\n\nexport default TaskList;\n","// import React from 'react'\nimport React, { Component } from 'react';\nimport './TasksFilter.css';\nimport PropTypes from 'prop-types';\n\nexport default class TasksFilter extends Component {\n  static defaultProps = {\n    itemStatusFilter: 'all',\n  };\n\n  static propTypes = {\n    onFilterChange: PropTypes.func.isRequired,\n    itemStatusFilter: PropTypes.string,\n  };\n\n  buttons = [\n    { name: 'all', label: 'All' },\n    { name: 'active', label: 'Active' },\n    { name: 'completed', label: 'Completed' },\n  ];\n\n  render() {\n    const { itemStatusFilter, onFilterChange } = this.props;\n\n    const battons = this.buttons.map(({ name, label }) => {\n      const isActive = itemStatusFilter === name;\n      const className = isActive ? 'selected' : '';\n\n      return (\n        <li key={name}>\n          <button className={className} type=\"button\" onClick={() => onFilterChange(name)}>\n            {label}\n          </button>\n        </li>\n      );\n    });\n\n    return <ul className=\"filters\">{battons}</ul>;\n  }\n}\n","import React from 'react';\nimport './Footer.css';\nimport PropTypes from 'prop-types';\n\nimport TasksFilter from '../TasksFilter/TasksFilter';\n\nconst Footer = ({ taskCount, itemStatusFilter, onFilterChange, clearCompleted }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">{taskCount} items left</span>\n    <TasksFilter itemStatusFilter={itemStatusFilter} onFilterChange={onFilterChange} />\n    <button className=\"clear-completed\" type=\"button\" onClick={clearCompleted}>\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.defaultProps = {\n  itemStatusFilter: 'all',\n  taskCount: null,\n};\n\nFooter.propTypes = {\n  itemStatusFilter: PropTypes.string,\n  taskCount: PropTypes.number,\n  onFilterChange: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\r\nimport TaskList from '../TaskList/TaskList';\r\nimport Footer from '../Footer/Footer';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    todoData: JSON.parse(localStorage.getItem('todoData')) || [],\r\n\r\n    filter: JSON.parse(localStorage.getItem('filter')) || 'all', // all, active, !completed\r\n  };\r\n\r\n  // удаляет элемент списка\r\n  deleteItem = (id) => {\r\n    this.setState(({ todoData }) => {\r\n      const ind = todoData.findIndex((el) => el.id === id);\r\n      const newArr = todoData.filter((_, index) => index !== ind);\r\n\r\n      return {\r\n        todoData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  // добавляет элемент в список\r\n  addItem = (text) => {\r\n    const newItem = this.createTodoItem(text);\r\n\r\n    this.setState(({ todoData }) => {\r\n      const newArr = [...todoData];\r\n      newArr.push(newItem);\r\n      return {\r\n        todoData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  // обновляет список с учетом выполненный tasks\r\n  onToggleDone = (id) => {\r\n    this.setState(({ todoData }) => ({\r\n      todoData: this.toggleProperties(todoData, id, 'completed'),\r\n    }));\r\n  };\r\n\r\n  // обновляет список с учетом радактируемых в данный момент tasks\r\n  onToggleEdit = (id) => {\r\n    this.setState(({ todoData }) => ({\r\n      todoData: this.toggleProperties(todoData, id, 'editing'),\r\n    }));\r\n  };\r\n\r\n  // обновляет свойства элемента\r\n  toggleProperties = (arr, id, propertyName) => {\r\n    const ind = arr.findIndex((el) => el.id === id);\r\n    const newArr = [...arr];\r\n    newArr[ind][propertyName] = !newArr[ind][propertyName];\r\n    return newArr;\r\n  };\r\n\r\n  // обновляет список с учетом отредактированный tasks\r\n  addEditedItem = (id, updateItem) => {\r\n    this.setState(({ todoData }) => {\r\n      const newArr = [...todoData];\r\n      const ind = newArr.findIndex((el) => el.id === id);\r\n      newArr[ind] = updateItem;\r\n      return {\r\n        todoData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  // изменяет значение свойства filter\r\n  onFilterChange = (filterName) => {\r\n    this.setState({ filter: filterName });\r\n  };\r\n\r\n  // удаляет все выполненные tasks\r\n  clearCompleted = () => {\r\n    this.setState(({ todoData }) => ({\r\n      todoData: [...todoData].filter((item) => !item.completed),\r\n    }));\r\n  };\r\n\r\n  filters = (arr, filter) => {\r\n    switch (filter) {\r\n      case 'all':\r\n        return arr;\r\n      case 'completed':\r\n        return arr.filter((item) => item.completed);\r\n      case 'active':\r\n        return arr.filter((item) => !item.completed);\r\n      default:\r\n        return arr;\r\n    }\r\n  };\r\n\r\n  // создает новый элемент списка\r\n  createTodoItem(label) {\r\n    const str = String(new Date());\r\n\r\n    return {\r\n      label,\r\n      completed: false,\r\n      editing: false,\r\n      dateСreation: str,\r\n      id: Math.floor(Math.random() * (1000 - 1) + 1),\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n    // console.log(this.state.filter)\r\n    // console.log(this.state.todoData)\r\n    const { todoData, filter } = this.state;\r\n\r\n    // счетчик невыполненных задач\r\n    const tasksLeftCount = todoData.filter((el) => !el.completed).length;\r\n\r\n    // отфильтрованные элементы\r\n    const filtersItems = this.filters(todoData, filter);\r\n\r\n    // изменяет localStorage\r\n    localStorage.setItem('todoData', JSON.stringify(todoData));\r\n    localStorage.setItem('filter', JSON.stringify(filter));\r\n\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <header className=\"header\">\r\n          <h1>todos</h1>\r\n          <NewTaskForm onItemAdded={this.addItem} />\r\n        </header>\r\n        <section className=\"main\">\r\n          <TaskList\r\n            todos={filtersItems}\r\n            onDeleted={this.deleteItem}\r\n            onToggleDone={this.onToggleDone}\r\n            onToggleEdit={this.onToggleEdit}\r\n            addEditedItem={this.addEditedItem}\r\n          />\r\n          <Footer\r\n            taskCount={tasksLeftCount}\r\n            itemStatusFilter={filter}\r\n            onFilterChange={this.onFilterChange}\r\n            clearCompleted={this.clearCompleted}\r\n          />\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// components\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}