{"version":3,"sources":["components/NewTaskForm/NewTaskForm.js","components/Timer/Timer.js","components/Task/Task.js","components/TaskList/TaskList.js","components/TasksFilter/TasksFilter.js","components/Footer/Footer.js","components/App/App.js","index.js"],"names":["NewTaskForm","state","label","onLabelChange","event","setState","target","value","onSubmit","onItemAdded","props","preventDefault","this","className","placeholder","onChange","Component","Timer","hours","minutes","seconds","intervalId","startTimer","clearInterval","newIntervalId","setInterval","stopTimer","id","changeTimer","strOutput","val","newStr","String","length","timerData","secondsOutput","minutesOutput","hoursOutput","type","onClick","defaultProps","Task","handleChange","item","addEditedItem","newItem","editing","handleChangeKey","key","onDeleted","onToggleEdit","onToggleDone","dateСreation","completed","dateObj","Date","wasCreated","formatDistanceToNow","includeSeconds","addSuffix","checked","defaultValue","onBlur","onKeyPress","TaskList","todos","elements","map","i","index","TasksFilter","buttons","name","itemStatusFilter","onFilterChange","battons","Footer","taskCount","clearCompleted","App","todoData","JSON","parse","localStorage","getItem","filter","deleteItem","ind","findIndex","el","_","addItem","text","createTodoItem","newArr","push","toggleProperties","arr","propertyName","updateItem","filterName","filters","updatTimerData","Math","floor","random","tasksLeftCount","filtersItems","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d6a2718.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './NewTaskForm.css';\nimport PropTypes from 'prop-types';\n\nexport default class NewTaskForm extends Component {\n  static propTypes = {\n    onItemAdded: PropTypes.func.isRequired,\n  };\n\n  state = {\n    label: '',\n  };\n\n  onLabelChange = (event) => {\n    this.setState({\n      label: event.target.value,\n    });\n  };\n\n  onSubmit = (event) => {\n    const { onItemAdded } = this.props;\n    const { label } = this.state;\n\n    event.preventDefault();\n    onItemAdded(label);\n    this.setState({\n      label: '',\n    });\n  };\n\n  render() {\n    const { label } = this.state;\n\n    return (\n      <form onSubmit={this.onSubmit} className=\"new-todo-form\">\n        <input className=\"new-todo\" placeholder=\"What needs to be done?\" onChange={this.onLabelChange} value={label} />\n        {/* <input className=\"new-todo-form__timer\" placeholder=\"Min\"/>\n        <input className=\"new-todo-form__timer\" placeholder=\"Sec\"/> */}\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Timer extends Component {\n  static defaultProps = {\n    timerData: {\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      intervalId: 0,\n    },\n  };\n\n  static propTypes = {\n    id: PropTypes.number.isRequired,\n    timerData: PropTypes.shape({\n      hours: PropTypes.number,\n      minutes: PropTypes.number,\n      seconds: PropTypes.number,\n      intervalId: PropTypes.number,\n    }),\n    changeTimer: PropTypes.func.isRequired,\n  };\n\n  state = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    intervalId: 0,\n  };\n\n  componentDidMount() {\n    // записывает в state данные таймера из props\n    const { timerData } = this.props;\n    // const {timerData} = item\n    this.setState({\n      ...timerData,\n    });\n  }\n\n  // включает таймер\n  startTimer = () => {\n    const { intervalId } = this.state;\n\n    // очищаем интервал если он уже запущен\n    if (intervalId) {\n      clearInterval(intervalId);\n      this.setState({\n        intervalId: 0,\n      });\n    }\n\n    const newIntervalId = setInterval(() => {\n      const { seconds, minutes, hours } = this.state;\n\n      if (seconds < 59) {\n        this.setState({\n          seconds: seconds + 1,\n        });\n      } else {\n        this.setState({\n          minutes: minutes + 1,\n          seconds: 0,\n        });\n\n        if (minutes < 59) {\n          this.setState({\n            minutes: minutes + 1,\n          });\n        } else {\n          this.setState({\n            hours: hours + 1,\n            minutes: 0,\n          });\n        }\n      }\n    }, 1000);\n\n    // записываем в intervalId результат выполнения ф-и setInterval\n    this.setState({\n      intervalId: newIntervalId,\n    });\n  };\n\n  // останавливает тайме\n  stopTimer = () => {\n    const { intervalId } = this.state;\n\n    if (intervalId) {\n      clearInterval(intervalId);\n      this.setState({\n        intervalId: 0,\n      });\n    }\n\n    // при остановке таймера передаем его данные в компонент App\n    const { id, changeTimer } = this.props;\n    const newTimerData = { ...this.state };\n    changeTimer(id, newTimerData);\n  };\n\n  // приобразует строки вывода таймера\n  strOutput = (val) => {\n    const newStr = String(val);\n    // eslint-disable-next-line prefer-template\n    return newStr.length === 1 ? '0' + newStr : newStr;\n  };\n\n  render() {\n    const { hours, minutes, seconds } = this.state;\n\n    const secondsOutput = this.strOutput(seconds);\n    const minutesOutput = this.strOutput(minutes);\n    const hoursOutput = this.strOutput(hours);\n\n    return (\n      <span className=\"description\">\n        <button className=\"icon icon-play\" type=\"button\" aria-label=\"icon-play \" onClick={this.startTimer} />\n        <button className=\"icon icon-pause\" type=\"button\" aria-label=\"icon-pause\" onClick={this.stopTimer} />\n        {hoursOutput}:{minutesOutput}:{secondsOutput}\n      </span>\n    );\n  }\n}\n","import './Task.css';\nimport React, { Component } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport PropTypes from 'prop-types';\nimport Timer from '../Timer/Timer';\n\nexport default class Task extends Component {\n  static propTypes = {\n    item: PropTypes.shape({\n      label: PropTypes.string,\n      completed: PropTypes.bool,\n      editing: PropTypes.bool,\n      dateСreation: PropTypes.string,\n      id: PropTypes.number,\n      timerData: PropTypes.shape({\n        hours: PropTypes.number,\n        minutes: PropTypes.number,\n        seconds: PropTypes.number,\n        intervalId: PropTypes.number,\n      }),\n    }).isRequired,\n    onDeleted: PropTypes.func.isRequired,\n    onToggleEdit: PropTypes.func.isRequired,\n    addEditedItem: PropTypes.func.isRequired,\n    onToggleDone: PropTypes.func.isRequired,\n    changeTimer: PropTypes.func.isRequired,\n  };\n\n  // обновляет label при потере фокуса с input\n  handleChange = (event) => {\n    const { item, addEditedItem } = this.props;\n    const newItem = { ...item };\n\n    newItem.label = event.target.value;\n    newItem.editing = false;\n\n    addEditedItem(item.id, newItem);\n  };\n\n  // обновляет label при нажатии Enter\n  handleChangeKey = (event) => {\n    if (event.key === 'Enter') {\n      this.handleChange(event);\n    }\n  };\n\n  render() {\n    // console.log(Task.defaultProps)\n    // console.log(this.props)\n\n    const { onDeleted, onToggleEdit, onToggleDone, item, changeTimer } = this.props;\n    const { label, dateСreation, completed, editing, timerData, id } = item;\n\n    // превращем строку обатно в объект\n    const dateObj = new Date(dateСreation);\n    // возвращает строку с информацией сколько минут/секунд назад создан Task\n    const wasCreated = formatDistanceToNow(dateObj, { includeSeconds: true }, { addSuffix: true });\n\n    let className = '';\n\n    if (completed) {\n      className += ' completed';\n    }\n\n    if (editing) {\n      className += ' editing';\n    }\n\n    return (\n      <li className={className}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" checked={!!completed} onChange={onToggleDone} />\n          <label>\n            <span className=\"title\">{label}</span>\n            <Timer changeTimer={changeTimer} timerData={timerData} id={id} />\n            <span className=\"created\">created {wasCreated} ago</span>\n          </label>\n          <button className=\"icon icon-edit\" type=\"button\" aria-label=\"Icon input edit\" onClick={onToggleEdit} />\n          <button className=\"icon icon-destroy\" type=\"button\" aria-label=\"Icon input deleted\" onClick={onDeleted} />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={label}\n          onBlur={this.handleChange}\n          onKeyPress={this.handleChangeKey}\n        />\n      </li>\n    );\n  }\n}\n","import React from 'react';\nimport './TaskList.css';\nimport PropTypes from 'prop-types';\nimport Task from '../Task/Task';\n\nconst TaskList = ({ todos, onDeleted, onToggleDone, onToggleEdit, addEditedItem, changeTimer }) => {\n  // console.log(TaskList.defaultProps)\n\n  const elements = todos.map((item, i) => {\n    const { id } = item;\n\n    return (\n      <Task\n        item={item}\n        key={id}\n        index={i}\n        onDeleted={() => onDeleted(id)}\n        onToggleDone={() => {\n          onToggleDone(id);\n        }}\n        onToggleEdit={() => {\n          onToggleEdit(id);\n        }}\n        addEditedItem={addEditedItem}\n        changeTimer={changeTimer}\n      />\n    );\n  });\n\n  return <ul className=\"todo-list\">{elements}</ul>;\n};\n\nTaskList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onToggleDone: PropTypes.func.isRequired,\n  onToggleEdit: PropTypes.func.isRequired,\n  addEditedItem: PropTypes.func.isRequired,\n  changeTimer: PropTypes.func.isRequired,\n};\n\nexport default TaskList;\n","// import React from 'react'\nimport React, { Component } from 'react';\nimport './TasksFilter.css';\nimport PropTypes from 'prop-types';\n\nexport default class TasksFilter extends Component {\n  static defaultProps = {\n    itemStatusFilter: 'all',\n  };\n\n  static propTypes = {\n    onFilterChange: PropTypes.func.isRequired,\n    itemStatusFilter: PropTypes.string,\n  };\n\n  buttons = [\n    { name: 'all', label: 'All' },\n    { name: 'active', label: 'Active' },\n    { name: 'completed', label: 'Completed' },\n  ];\n\n  render() {\n    const { itemStatusFilter, onFilterChange } = this.props;\n\n    const battons = this.buttons.map(({ name, label }) => {\n      const isActive = itemStatusFilter === name;\n      const className = isActive ? 'selected' : '';\n\n      return (\n        <li key={name}>\n          <button className={className} type=\"button\" onClick={() => onFilterChange(name)}>\n            {label}\n          </button>\n        </li>\n      );\n    });\n\n    return <ul className=\"filters\">{battons}</ul>;\n  }\n}\n","import React from 'react';\nimport './Footer.css';\nimport PropTypes from 'prop-types';\n\nimport TasksFilter from '../TasksFilter/TasksFilter';\n\nconst Footer = ({ taskCount, itemStatusFilter, onFilterChange, clearCompleted }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">{taskCount} items left</span>\n    <TasksFilter itemStatusFilter={itemStatusFilter} onFilterChange={onFilterChange} />\n    <button className=\"clear-completed\" type=\"button\" onClick={clearCompleted}>\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.defaultProps = {\n  itemStatusFilter: 'all',\n  taskCount: null,\n};\n\nFooter.propTypes = {\n  itemStatusFilter: PropTypes.string,\n  taskCount: PropTypes.number,\n  onFilterChange: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\nimport TaskList from '../TaskList/TaskList';\nimport Footer from '../Footer/Footer';\n\nexport default class App extends Component {\n  state = {\n    todoData: JSON.parse(localStorage.getItem('todoData')) || [],\n\n    filter: JSON.parse(localStorage.getItem('filter')) || 'all', // all, active, !completed\n  };\n\n  // удаляет элемент списка\n  deleteItem = (id) => {\n    this.setState(({ todoData }) => {\n      const ind = todoData.findIndex((el) => el.id === id);\n      // eslint-disable-next-line id-length\n      const newArr = todoData.filter((_, index) => index !== ind);\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  // добавляет элемент в список\n  addItem = (text) => {\n    const newItem = this.createTodoItem(text);\n\n    this.setState(({ todoData }) => {\n      const newArr = [...todoData];\n      newArr.push(newItem);\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  // обновляет список с учетом выполненный tasks\n  onToggleDone = (id) => {\n    this.setState(({ todoData }) => ({\n      todoData: this.toggleProperties(todoData, id, 'completed'),\n    }));\n  };\n\n  // обновляет список с учетом радактируемых в данный момент tasks\n  onToggleEdit = (id) => {\n    this.setState(({ todoData }) => ({\n      todoData: this.toggleProperties(todoData, id, 'editing'),\n    }));\n  };\n\n  // обновляет свойства элемента\n  toggleProperties = (arr, id, propertyName) => {\n    const ind = arr.findIndex((el) => el.id === id);\n    const newArr = [...arr];\n    newArr[ind][propertyName] = !newArr[ind][propertyName];\n    return newArr;\n  };\n\n  // обновляет список с учетом отредактированный tasks\n  addEditedItem = (id, updateItem) => {\n    this.setState(({ todoData }) => {\n      const newArr = [...todoData];\n      const ind = newArr.findIndex((el) => el.id === id);\n      newArr[ind] = updateItem;\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  // изменяет значение свойства filter\n  onFilterChange = (filterName) => {\n    this.setState({ filter: filterName });\n  };\n\n  // удаляет все выполненные tasks\n  clearCompleted = () => {\n    this.setState(({ todoData }) => ({\n      todoData: [...todoData].filter((item) => !item.completed),\n    }));\n  };\n\n  filters = (arr, filter) => {\n    switch (filter) {\n      case 'all':\n        return arr;\n      case 'completed':\n        return arr.filter((item) => item.completed);\n      case 'active':\n        return arr.filter((item) => !item.completed);\n      default:\n        return arr;\n    }\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  changeTimer = (id, updatTimerData) => {\n    this.setState(({ todoData }) => {\n      const newArr = [...todoData];\n\n      const ind = newArr.findIndex((el) => el.id === id);\n\n      newArr[ind].timerData = updatTimerData;\n      // console.log(newArr[ind].timerData)\n      return {\n        todoData: newArr,\n      };\n    });\n    // eslint-disable-next-line react/destructuring-assignment\n    // console.log(this.state.todoData)\n  };\n\n  // создает новый элемент списка\n  createTodoItem(label) {\n    const str = String(new Date());\n\n    return {\n      label,\n      completed: false,\n      editing: false,\n      dateСreation: str,\n      id: Math.floor(Math.random() * (1000 - 1) + 1),\n      timerData: {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        intervalId: 0,\n      },\n    };\n  }\n\n  render() {\n    // console.log(this.state.filter)\n    // console.log(this.state.todoData)\n    const { todoData, filter } = this.state;\n\n    // счетчик невыполненных задач\n    const tasksLeftCount = todoData.filter((el) => !el.completed).length;\n\n    // отфильтрованные элементы\n    const filtersItems = this.filters(todoData, filter);\n\n    // изменяет localStorage\n    localStorage.setItem('todoData', JSON.stringify(todoData));\n    localStorage.setItem('filter', JSON.stringify(filter));\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTaskForm onItemAdded={this.addItem} />\n        </header>\n        <section className=\"main\">\n          <TaskList\n            todos={filtersItems}\n            onDeleted={this.deleteItem}\n            onToggleDone={this.onToggleDone}\n            onToggleEdit={this.onToggleEdit}\n            addEditedItem={this.addEditedItem}\n            changeTimer={this.changeTimer}\n          />\n          <Footer\n            taskCount={tasksLeftCount}\n            itemStatusFilter={filter}\n            onFilterChange={this.onFilterChange}\n            clearCompleted={this.clearCompleted}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// components\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}